2023-02-04 19:21:38,472 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0,1: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (GCC) 7.3.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-04 19:21:38,473 - mmcls - INFO - Distributed training: True
2023-02-04 19:21:38,572 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/train.txt',
        classes='data/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data/val',
        ann_file='data/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(
    interval=1, metric='accuracy', metric_options=dict(topk=(1, )))
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = 'work_dirs/flower_two_gpus'
gpu_ids = range(0, 2)

2023-02-04 19:21:43,264 - mmcls - INFO - Set random seed to 1727929280, deterministic: False
2023-02-04 19:21:43,335 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-04 19:21:43,406 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-04 19:21:43,652 - mmcls - INFO - load checkpoint from local path: checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth
2023-02-04 19:21:43,845 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-04 19:21:43,846 - mmcls - INFO - Start running, host: scz0beo@g0097, work_dir: /data/run01/scz0beo/mmclassification/work_dirs/flower_two_gpus
2023-02-04 19:21:43,846 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) DistOptimizerHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-04 19:21:43,846 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-04 19:21:43,846 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0beo/mmclassification/work_dirs/flower_two_gpus by HardDiskBackend.
2023-02-04 19:21:54,063 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-04 19:21:58,246 - mmcls - INFO - Epoch(val) [1][9]	accuracy_top-1: 87.7622
2023-02-04 19:22:02,110 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-04 19:22:04,739 - mmcls - INFO - Epoch(val) [2][9]	accuracy_top-1: 90.0350
2023-02-04 19:22:08,571 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-04 19:22:11,207 - mmcls - INFO - Epoch(val) [3][9]	accuracy_top-1: 90.2098
2023-02-04 19:22:15,046 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-04 19:22:17,689 - mmcls - INFO - Epoch(val) [4][9]	accuracy_top-1: 90.9091
2023-02-04 19:22:21,488 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-04 19:22:24,138 - mmcls - INFO - Epoch(val) [5][9]	accuracy_top-1: 91.6084
2023-02-04 19:22:27,961 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-04 19:22:30,603 - mmcls - INFO - Epoch(val) [6][9]	accuracy_top-1: 91.6084
2023-02-04 19:22:34,392 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-04 19:22:37,033 - mmcls - INFO - Epoch(val) [7][9]	accuracy_top-1: 91.6084
2023-02-04 19:22:40,914 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-04 19:22:43,569 - mmcls - INFO - Epoch(val) [8][9]	accuracy_top-1: 92.1329
2023-02-04 19:22:47,461 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-04 19:22:50,101 - mmcls - INFO - Epoch(val) [9][9]	accuracy_top-1: 92.1329
2023-02-04 19:22:54,048 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-04 19:22:56,680 - mmcls - INFO - Epoch(val) [10][9]	accuracy_top-1: 91.9580
2023-02-04 19:23:00,532 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-04 19:23:03,162 - mmcls - INFO - Epoch(val) [11][9]	accuracy_top-1: 92.4825
2023-02-04 19:23:07,072 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-04 19:23:09,705 - mmcls - INFO - Epoch(val) [12][9]	accuracy_top-1: 92.1329
2023-02-04 19:23:13,553 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-04 19:23:16,185 - mmcls - INFO - Epoch(val) [13][9]	accuracy_top-1: 92.6573
2023-02-04 19:23:20,018 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-04 19:23:22,657 - mmcls - INFO - Epoch(val) [14][9]	accuracy_top-1: 92.3077
2023-02-04 19:23:26,495 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-04 19:23:29,127 - mmcls - INFO - Epoch(val) [15][9]	accuracy_top-1: 92.6573
2023-02-04 19:23:32,947 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-04 19:23:35,580 - mmcls - INFO - Epoch(val) [16][9]	accuracy_top-1: 93.0070
2023-02-04 19:23:39,463 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-04 19:23:42,096 - mmcls - INFO - Epoch(val) [17][9]	accuracy_top-1: 92.8322
2023-02-04 19:23:45,954 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-04 19:23:48,587 - mmcls - INFO - Epoch(val) [18][9]	accuracy_top-1: 93.5315
2023-02-04 19:23:52,405 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-04 19:23:55,040 - mmcls - INFO - Epoch(val) [19][9]	accuracy_top-1: 93.1818
2023-02-04 19:23:58,886 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-04 19:24:01,535 - mmcls - INFO - Epoch(val) [20][9]	accuracy_top-1: 93.1818
2023-02-04 19:24:05,386 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-04 19:24:08,025 - mmcls - INFO - Epoch(val) [21][9]	accuracy_top-1: 92.6573
2023-02-04 19:24:11,927 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-04 19:24:14,559 - mmcls - INFO - Epoch(val) [22][9]	accuracy_top-1: 93.3566
2023-02-04 19:24:18,447 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-04 19:24:21,075 - mmcls - INFO - Epoch(val) [23][9]	accuracy_top-1: 92.8322
2023-02-04 19:24:24,954 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-04 19:24:27,587 - mmcls - INFO - Epoch(val) [24][9]	accuracy_top-1: 94.2308
2023-02-04 19:24:31,420 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-04 19:24:34,053 - mmcls - INFO - Epoch(val) [25][9]	accuracy_top-1: 93.3566
2023-02-04 19:24:37,913 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-04 19:24:40,551 - mmcls - INFO - Epoch(val) [26][9]	accuracy_top-1: 93.7063
2023-02-04 19:24:44,472 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-04 19:24:47,097 - mmcls - INFO - Epoch(val) [27][9]	accuracy_top-1: 93.1818
2023-02-04 19:24:50,962 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-04 19:24:53,603 - mmcls - INFO - Epoch(val) [28][9]	accuracy_top-1: 93.8811
2023-02-04 19:24:57,440 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-04 19:25:00,071 - mmcls - INFO - Epoch(val) [29][9]	accuracy_top-1: 92.4825
2023-02-04 19:25:03,920 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-04 19:25:06,559 - mmcls - INFO - Epoch(val) [30][9]	accuracy_top-1: 93.8811
2023-02-04 19:25:10,474 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-04 19:25:13,101 - mmcls - INFO - Epoch(val) [31][9]	accuracy_top-1: 93.5315
2023-02-04 19:25:17,003 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-04 19:25:19,641 - mmcls - INFO - Epoch(val) [32][9]	accuracy_top-1: 93.7063
2023-02-04 19:25:23,525 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-04 19:25:26,150 - mmcls - INFO - Epoch(val) [33][9]	accuracy_top-1: 94.0559
2023-02-04 19:25:29,994 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-04 19:25:32,629 - mmcls - INFO - Epoch(val) [34][9]	accuracy_top-1: 93.3566
2023-02-04 19:25:36,497 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-04 19:25:39,127 - mmcls - INFO - Epoch(val) [35][9]	accuracy_top-1: 93.7063
2023-02-04 19:25:42,936 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-04 19:25:45,697 - mmcls - INFO - Epoch(val) [36][9]	accuracy_top-1: 93.5315
2023-02-04 19:25:49,571 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-04 19:25:52,215 - mmcls - INFO - Epoch(val) [37][9]	accuracy_top-1: 93.7063
2023-02-04 19:25:56,102 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-04 19:25:58,739 - mmcls - INFO - Epoch(val) [38][9]	accuracy_top-1: 94.0559
2023-02-04 19:26:02,610 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-04 19:26:05,382 - mmcls - INFO - Epoch(val) [39][9]	accuracy_top-1: 94.0559
2023-02-04 19:26:09,261 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-04 19:26:11,900 - mmcls - INFO - Epoch(val) [40][9]	accuracy_top-1: 93.8811
2023-02-04 19:26:15,874 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-04 19:26:18,504 - mmcls - INFO - Epoch(val) [41][9]	accuracy_top-1: 93.5315
2023-02-04 19:26:22,433 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-04 19:26:25,073 - mmcls - INFO - Epoch(val) [42][9]	accuracy_top-1: 93.8811
2023-02-04 19:26:28,918 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-04 19:26:31,558 - mmcls - INFO - Epoch(val) [43][9]	accuracy_top-1: 93.7063
2023-02-04 19:26:35,449 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-04 19:26:38,080 - mmcls - INFO - Epoch(val) [44][9]	accuracy_top-1: 94.2308
2023-02-04 19:26:41,876 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-04 19:26:44,509 - mmcls - INFO - Epoch(val) [45][9]	accuracy_top-1: 93.7063
2023-02-04 19:26:48,343 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-04 19:26:50,968 - mmcls - INFO - Epoch(val) [46][9]	accuracy_top-1: 93.5315
2023-02-04 19:26:54,790 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-04 19:26:57,426 - mmcls - INFO - Epoch(val) [47][9]	accuracy_top-1: 93.8811
2023-02-04 19:27:01,288 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-04 19:27:03,917 - mmcls - INFO - Epoch(val) [48][9]	accuracy_top-1: 94.0559
2023-02-04 19:27:07,767 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-04 19:27:10,404 - mmcls - INFO - Epoch(val) [49][9]	accuracy_top-1: 93.8811
2023-02-04 19:27:14,308 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-04 19:27:16,944 - mmcls - INFO - Epoch(val) [50][9]	accuracy_top-1: 94.4056
2023-02-04 19:27:20,817 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-04 19:27:23,452 - mmcls - INFO - Epoch(val) [51][9]	accuracy_top-1: 93.8811
2023-02-04 19:27:27,302 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-04 19:27:29,940 - mmcls - INFO - Epoch(val) [52][9]	accuracy_top-1: 94.2308
2023-02-04 19:27:33,782 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-04 19:27:36,415 - mmcls - INFO - Epoch(val) [53][9]	accuracy_top-1: 93.8811
2023-02-04 19:27:40,317 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-04 19:27:42,955 - mmcls - INFO - Epoch(val) [54][9]	accuracy_top-1: 94.0559
2023-02-04 19:27:46,789 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-04 19:27:49,433 - mmcls - INFO - Epoch(val) [55][9]	accuracy_top-1: 94.2308
2023-02-04 19:27:53,343 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-04 19:27:55,984 - mmcls - INFO - Epoch(val) [56][9]	accuracy_top-1: 93.8811
2023-02-04 19:27:59,861 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-04 19:28:02,496 - mmcls - INFO - Epoch(val) [57][9]	accuracy_top-1: 94.0559
2023-02-04 19:28:06,316 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-04 19:28:08,962 - mmcls - INFO - Epoch(val) [58][9]	accuracy_top-1: 94.4056
2023-02-04 19:28:12,786 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-04 19:28:15,425 - mmcls - INFO - Epoch(val) [59][9]	accuracy_top-1: 94.7552
2023-02-04 19:28:19,326 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-04 19:28:21,954 - mmcls - INFO - Epoch(val) [60][9]	accuracy_top-1: 94.4056
2023-02-04 19:28:25,863 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-04 19:28:28,501 - mmcls - INFO - Epoch(val) [61][9]	accuracy_top-1: 94.4056
2023-02-04 19:28:32,362 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-04 19:28:35,014 - mmcls - INFO - Epoch(val) [62][9]	accuracy_top-1: 94.4056
2023-02-04 19:28:38,835 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-04 19:28:41,465 - mmcls - INFO - Epoch(val) [63][9]	accuracy_top-1: 94.5804
2023-02-04 19:28:45,300 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-04 19:28:47,938 - mmcls - INFO - Epoch(val) [64][9]	accuracy_top-1: 94.5804
2023-02-04 19:28:51,770 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-04 19:28:54,399 - mmcls - INFO - Epoch(val) [65][9]	accuracy_top-1: 94.7552
2023-02-04 19:28:58,261 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-04 19:29:00,917 - mmcls - INFO - Epoch(val) [66][9]	accuracy_top-1: 94.9301
2023-02-04 19:29:04,744 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-04 19:29:07,380 - mmcls - INFO - Epoch(val) [67][9]	accuracy_top-1: 93.8811
2023-02-04 19:29:11,251 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-04 19:29:13,905 - mmcls - INFO - Epoch(val) [68][9]	accuracy_top-1: 94.4056
2023-02-04 19:29:17,780 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-04 19:29:20,416 - mmcls - INFO - Epoch(val) [69][9]	accuracy_top-1: 94.5804
2023-02-04 19:29:24,293 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-04 19:29:26,953 - mmcls - INFO - Epoch(val) [70][9]	accuracy_top-1: 94.2308
2023-02-04 19:29:30,783 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-04 19:29:33,427 - mmcls - INFO - Epoch(val) [71][9]	accuracy_top-1: 94.9301
2023-02-04 19:29:37,227 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-04 19:29:39,865 - mmcls - INFO - Epoch(val) [72][9]	accuracy_top-1: 94.5804
2023-02-04 19:29:43,733 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-04 19:29:46,388 - mmcls - INFO - Epoch(val) [73][9]	accuracy_top-1: 94.4056
2023-02-04 19:29:50,242 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-04 19:29:52,881 - mmcls - INFO - Epoch(val) [74][9]	accuracy_top-1: 94.9301
2023-02-04 19:29:56,737 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-04 19:29:59,384 - mmcls - INFO - Epoch(val) [75][9]	accuracy_top-1: 94.5804
2023-02-04 19:30:03,212 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-04 19:30:05,858 - mmcls - INFO - Epoch(val) [76][9]	accuracy_top-1: 94.2308
2023-02-04 19:30:09,735 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-04 19:30:12,377 - mmcls - INFO - Epoch(val) [77][9]	accuracy_top-1: 94.5804
2023-02-04 19:30:16,233 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-04 19:30:18,892 - mmcls - INFO - Epoch(val) [78][9]	accuracy_top-1: 94.5804
2023-02-04 19:30:22,725 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-04 19:30:25,367 - mmcls - INFO - Epoch(val) [79][9]	accuracy_top-1: 94.7552
2023-02-04 19:30:29,232 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-04 19:30:31,885 - mmcls - INFO - Epoch(val) [80][9]	accuracy_top-1: 94.7552
2023-02-04 19:30:35,727 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-04 19:30:38,368 - mmcls - INFO - Epoch(val) [81][9]	accuracy_top-1: 95.1049
2023-02-04 19:30:42,209 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-04 19:30:44,855 - mmcls - INFO - Epoch(val) [82][9]	accuracy_top-1: 95.8042
2023-02-04 19:30:48,680 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-04 19:30:51,323 - mmcls - INFO - Epoch(val) [83][9]	accuracy_top-1: 94.7552
2023-02-04 19:30:55,154 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-04 19:30:57,790 - mmcls - INFO - Epoch(val) [84][9]	accuracy_top-1: 95.2797
2023-02-04 19:31:01,595 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-04 19:31:04,239 - mmcls - INFO - Epoch(val) [85][9]	accuracy_top-1: 94.9301
2023-02-04 19:31:08,014 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-04 19:31:10,692 - mmcls - INFO - Epoch(val) [86][9]	accuracy_top-1: 95.1049
2023-02-04 19:31:14,498 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-04 19:31:17,468 - mmcls - INFO - Epoch(val) [87][9]	accuracy_top-1: 94.4056
2023-02-04 19:31:21,337 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-04 19:31:23,999 - mmcls - INFO - Epoch(val) [88][9]	accuracy_top-1: 94.7552
2023-02-04 19:31:27,811 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-04 19:31:30,474 - mmcls - INFO - Epoch(val) [89][9]	accuracy_top-1: 94.9301
2023-02-04 19:31:34,292 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-04 19:31:36,937 - mmcls - INFO - Epoch(val) [90][9]	accuracy_top-1: 94.9301
2023-02-04 19:31:40,721 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-04 19:31:43,375 - mmcls - INFO - Epoch(val) [91][9]	accuracy_top-1: 95.1049
2023-02-04 19:31:47,183 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-04 19:31:49,836 - mmcls - INFO - Epoch(val) [92][9]	accuracy_top-1: 94.4056
2023-02-04 19:31:53,623 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-04 19:31:56,276 - mmcls - INFO - Epoch(val) [93][9]	accuracy_top-1: 94.5804
2023-02-04 19:32:00,072 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-04 19:32:02,731 - mmcls - INFO - Epoch(val) [94][9]	accuracy_top-1: 94.4056
2023-02-04 19:32:06,528 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-04 19:32:09,177 - mmcls - INFO - Epoch(val) [95][9]	accuracy_top-1: 95.2797
2023-02-04 19:32:13,031 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-04 19:32:15,671 - mmcls - INFO - Epoch(val) [96][9]	accuracy_top-1: 94.9301
2023-02-04 19:32:19,464 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-04 19:32:22,103 - mmcls - INFO - Epoch(val) [97][9]	accuracy_top-1: 94.4056
2023-02-04 19:32:25,896 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-04 19:32:28,559 - mmcls - INFO - Epoch(val) [98][9]	accuracy_top-1: 95.2797
2023-02-04 19:32:32,353 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-04 19:32:35,000 - mmcls - INFO - Epoch(val) [99][9]	accuracy_top-1: 94.7552
2023-02-04 19:32:38,809 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-04 19:32:41,451 - mmcls - INFO - Epoch(val) [100][9]	accuracy_top-1: 94.7552
